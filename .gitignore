##### PER LIGHT AOV ######
import pymel.core as pmc
import mtoa

interface = mtoa.aovs.AOVInterface()

class Aov(object):
    def __init__(self, name, lpe):
        self.name = name
        self.lpe = lpe
        self.lpeGroup = None
      
    def addLightGroup (self, lightGroup):
        self.lpeGroup = self.lpe.replace('L.', "L.'{}'".format(lightGroup))
          
          
aovKeys = [ 
            Aov("Diffuse", lpe = "C<RD>.*<L.>"),
            Aov("Specular", lpe = "C<RS[^'coat']>.*<L.>"),
            
]

def getLights():
    return pmc.ls(type=['aiAreaLight', 'aiSkyDomeLight', 'directionalLight'])
def getLightGroups():
    groups = []
    for light in getLights():
        groups.append (light.aiAov.get())
    return groups
    
for aovKey in aovKeys:
    for lightGroup in getLightGroups():
        sceneAov = interface.addAOV("{}_{}".format(lightGroup, aovKey.name))
        aiAov = pmc.PyNode(sceneAov.node)
        aovKey.addLightGroup(lightGroup)
        aiAov.lightPathExpression.set(aovKey.lpeGroup)
        
        
import mtoa.aovs
mtoa.aovs.AOVInterface().addAOV('crypto_asset', aovShader='cryptomatte' )
mtoa.aovs.AOVInterface().addAOV('crypto_material', aovShader='cryptomatte' )
mtoa.aovs.AOVInterface().addAOV('crypto_object', aovShader='cryptomatte' )        
mtoa.aovs.AOVInterface().addAOV('Z' )
mtoa.aovs.AOVInterface().addAOV('P' )
mtoa.aovs.AOVInterface().addAOV('coat' ) 
mtoa.aovs.AOVInterface().addAOV('transmission' ) 
mtoa.aovs.AOVInterface().addAOV('AO', aovShader='aiAmbientOcclusion' ) 
mtoa.aovs.AOVInterface().addAOV('emission' ) 
mtoa.aovs.AOVInterface().addAOV('sss' )  
mtoa.aovs.AOVInterface().addAOV('albedo' )   
